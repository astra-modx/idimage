<?php

class idImageGalleryeGetListProcessor extends modObjectGetListProcessor
{
    public $objectType = 'msProduct';
    public $classKey = 'msProduct';
    public $languageTopics = ['idimage:manager', 'idimage:actions'];
    private idImage $idImage;
    private $product_id;
    private array $products = [];

    public function initialize()
    {
        $this->modx->getService('miniShop2', 'miniShop2', MODX_CORE_PATH.'components/minishop2/model/');
        $this->idImage = $this->modx->getService('idimage', 'idImage', MODX_CORE_PATH.'components/idimage/model/');
        $this->product_id = $this->getProperty('product_id');
        $this->products = [];

        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * We do a special check of permissions
     * because our objects is not an instances of modAccessibleObject
     *
     * @return boolean|string
     */
    public function beforeQuery()
    {
        if (!$this->checkPermissions()) {
            return $this->modx->lexicon('access_denied');
        }

        if (!$this->product_id) {
            return $this->modx->lexicon('idimage_product_not_found');
        }
        /* @var idImageSimilar $similar */
        if ($similar = $this->modx->getObject('idImageSimilar', ['pid' => $this->product_id])) {
            $products = $this->idImage->extractor()->load($similar)->best(50, 100, 100)->products();
            if ($products) {
                foreach ($products as $product) {
                    $this->products[$product['pid']] = $product['probability'];
                }
            }
        }


        /* @var idImageClose $close */
        if ($close = $this->modx->getObject('idImageClose', ['pid' => $this->product_id])) {
        }

        return true;
    }

    public function getClose()
    {
        $response = $this->idImage->runProcessor('mgr/close/getlist', [
            'pid' => $this->product_id,
        ]);

        if ($response->isError()) {
            return [];
        }


        $data = $response->getResponse();
        $data = json_decode($data, true);

        $item = [];
        if (!empty($data['results'][0])) {
            $item = $data['results'][0];
        }
        $item['product_indexed'] = $this->idImage->getTotalProductsIndexed();

        return $item;
    }


    /**
     * @param  xPDOObject  $object
     *
     * @return array
     */
    public function prepareArray(array $array, string $type = 'similar')
    {
        $id = $array['id'];

        if ($type === 'similar') {
            $path = 'images/idimage/'.$array['hash'].'.jpg';
            $thumbnail = !file_exists(MODX_ASSETS_PATH.$path) ? null : MODX_ASSETS_URL.$path;
            $probability = $this->products[$id].'%';
        } else {
            $probability = $array['probability'];
            $thumbnail = $array['thumbnail'];
        }

        $array = [
            'id' => $id,
            'type' => $type,
            'class' => 'idimage-type-'.$type,
            'name' => $array['name'],
            'thumbnail' => $thumbnail,
            'url' => './index.php?a=resource/update&id='.$id,
            'contextLink' => $array['context_link'],
            'probability' => $probability,
            'active' => $array['active'],
            'hash' => $array['hash'],
            'product_id' => $id,
            'actions' => [],
        ];

        return $array;
    }

    /**
     * @return array|string
     */
    public function process()
    {
        $beforeQuery = $this->beforeQuery();
        if ($beforeQuery !== true) {
            return $this->failure($beforeQuery);
        }
        $data = $this->getData();

        return $this->outputArray($data['results'], $data['total']);
    }

    public function outputArray(array $array, $count = false)
    {
        if ($count === false) {
            $count = count($array);
        }
        $output = json_encode(array(
            'success' => true,
            'total' => $count,
            'results' => $array,
            'close' => $this->getClose(),
        ));
        if ($output === false) {
            $this->modx->log(modX::LOG_LEVEL_ERROR, 'Processor failed creating output array due to JSON error '.json_last_error());

            return json_encode(array('success' => false));
        }

        return $output;
    }


    public function getData()
    {
        $data = [];
        $limit = intval($this->getProperty('limit'));
        $start = intval($this->getProperty('start'));

        $c = $this->modx->newQuery($this->classKey);
        $c = $this->prepareQueryBeforeCount($c);
        $data['total'] = $this->modx->getCount($this->classKey, $c);
        $c = $this->prepareQueryAfterCount($c);
        $c->select($this->modx->getSelectColumns($this->classKey, $this->classKey));

        $sortClassKey = $this->getSortClassKey();
        $sortKey = $this->modx->getSelectColumns(
            $sortClassKey,
            $this->getProperty('sortAlias', $sortClassKey),
            '',
            [$this->getProperty('sort')]
        );
        if (empty($sortKey)) {
            $sortKey = $this->getProperty('sort');
        }
        $c->sortby($sortKey, $this->getProperty('dir'));
        if ($limit > 0) {
            $c->limit($limit, $start);
        }

        $data['results'] = [];

        if ($c->prepare() && $c->stmt->execute()) {
            while ($row = $c->stmt->fetch(PDO::FETCH_ASSOC)) {
                $data['results'][] = $this->prepareArray($row);
            }
        } else {
            $this->modx->log(modX::LOG_LEVEL_ERROR, print_r($c->stmt->errorInfo(), true));
        }

        return $data;
    }

    /**
     * @param  xPDOQuery  $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {
        $ids = $this->products ? array_keys($this->products) : [999999999];
        if (!empty($ids)) {
            // Преобразуем массив в строку чисел для SQL
            $fieldIds = implode(',', $ids = array_map('intval', $ids));
            $c->sortby('FIELD(msProduct.id, '.$fieldIds.')', 'ASC');
        }
        $c->where([
            'msProduct.id:IN' => $ids, // Теперь передаём массив чисел
        ]);

        $c->innerJoin('msProductData', 'Data', 'Data.id = msProduct.id');
        $c->innerJoin('idImageClose', 'Close', 'Close.pid = msProduct.id');
        $c->select('msProduct.pagetitle as name, msProduct.published as active, msProduct.deleted');
        $c->select('Close.hash as hash');

        return $c;
    }

}

return 'idImageGalleryeGetListProcessor';
