<?php

abstract class idImageActionsProcessor extends modProcessor
{
    /* @var idImage $idImage */
    public $idImage;

    public function initialize()
    {
        $this->idImage = $this->modx->getService('idimage', 'idImage', MODX_CORE_PATH.'components/idimage/model/');

        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function idimage()
    {
        return $this->idImage;
    }

    public function calculationSteps($query, $chunk)
    {
        $ids = $query->where([
            'status:!=' => idImageClose::STATUS_PROCESSING,
        ])->ids();
        $total = count($ids);
        $ids = array_chunk($ids, $chunk);

        return [
            'iterations' => $ids,
            'total' => $total,
        ];
    }

    public function ids()
    {
        $ids = $this->getProperty('ids');

        if (empty($ids)) {
            return null;
        }

        if (!is_array($ids)) {
            $ids = json_decode($ids, true);
            if (!is_array($ids)) {
                return null;
            }
        }

        return array_filter(array_map('intval', $ids));
    }

    public function query()
    {
        return $this->idimage()->query();
    }


    public function withProgressBar($callback)
    {
        if ($this->setCheckbox('steps')) {
            $ids = $this->withProgressIds();

            return $this->success('', [
                'total' => count($ids),
                'iterations' => array_chunk($ids, $this->stepChunk()),
            ]);
        }
        if (!$ids = $this->ids()) {
            return $this->success('upload', [
                'total' => 0,
            ]);
        }

        $total = $callback($ids);

        return $this->success('upload', [
            'total' => $total,
        ]);
    }


    private $total = 0;

    public function pt()
    {
        $this->total++;

        return $this;
    }

    public function total()
    {
        return $this->total;
    }
}
