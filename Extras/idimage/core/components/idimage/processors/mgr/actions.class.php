<?php

use IdImage\Exceptions\ExceptionJsonModx;

abstract class idImageActionsProcessor extends modProcessor
{
    public $languageTopics = ['idimage:manager'];

    /* @var idImage $idImage */
    public $idImage;

    public function initialize()
    {
        $this->idImage = $this->modx->getService('idimage', 'idImage', MODX_CORE_PATH.'components/idimage/model/');

        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function idimage()
    {
        return $this->idImage;
    }


    public function ids()
    {
        $ids = $this->getProperty('ids');

        if (empty($ids)) {
            return null;
        }

        if (!is_array($ids)) {
            $ids = json_decode($ids, true);
            if (!is_array($ids)) {
                return null;
            }
        }

        return array_filter(array_map('intval', $ids));
    }

    public function query()
    {
        return $this->idimage()->query();
    }

    protected $stat = null;

    public function setStat(array $stat)
    {
        $this->stat = $stat;

        return $this;
    }

    public function getStat(): ?array
    {
        return $this->stat;
    }

    public function withProgressBar(Closure $callback)
    {
        if ($this->setCheckbox('steps')) {
            if (!$ids = $this->ids()) {
                $ids = $this->withProgressIds();
            }


            $data = [
                'total' => is_array($ids) ? count($ids) : 0,
                'iterations' => (!empty($ids) && is_array($ids)) ? array_chunk($ids, $this->stepChunk()) : null,
            ];

            return $this->success('', $data);
        }
        if (!$ids = $this->ids()) {
            return $this->success('upload', [
                'total' => 0,
            ]);
        }

        $total = $callback($ids);

        $data = [
            'total' => $total,
        ];
        if ($stat = $this->getStat()) {
            $data['stat'] = $stat;
        }

        return $this->success($this->modx->lexicon('success'), $data);
    }


    private $total = 0;

    public function pt()
    {
        $this->total++;

        return $this;
    }

    public function total()
    {
        return $this->total;
    }

    public function marker($field, string $value, $ids)
    {
        if (count($ids) === 0) {
            return 0;
        }
        $ids = implode(',', $ids);
        $value = "'{$value}'";
        $table = $this->modx->getTableName('idImageClose');
        $sql = "UPDATE {$table} SET {$field} = {$value} WHERE id IN ({$ids})";

        return $this->modx->exec($sql);
    }

    public function canToken()
    {
        if (!$this->idImage->option('enable')) {
            throw new ExceptionJsonModx($this->modx->lexicon('idimage_error_disabled_sync'));
        }

        $this->idimage()->canToken();
    }
}
